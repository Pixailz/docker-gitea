#!/bin/ash

SERVICE_NAME="PostgreSQL"

if [ "${DEBUG_ENTRYPOINT}" != "" ]; then
	printf "debuging \x1b[38:5:39m${SERVICE_NAME}\x1b[00m \n\n"
	printf "DB_PASS       %s\n" "${DB_PASS}"
	printf "DB_USER       %s\n" "${DB_USER}"
	printf "DB_NAME       %s\n" "${DB_NAME}"
	printf "PGDATA        %s\n" "${PGDATA}"
fi

function	do_as_postgres()
{
	local	cmd="${@}"

	[ "${DEBUG_ENTRYPOINT}" != "" ] && echo ${cmd}
	su - postgres -c "${cmd}"
}

function	do_sql()
{
	local	req="${1}"

	do_as_postgres "psql -c \"${req};\""
}

function	set_var()
{
	local	var_name="${1}"
	local	var_value="${2}"
	local	var_file="${PGDATA}/postgresql.conf"
	local	pos
	local	pos_last

	pos=$(grep -n "${var_name} =" "${var_file}" | cut -d':' -f1)
	sed -i "${pos}d" "${var_file}"
	sed -i "${pos}i${var_name} = ${var_value}" "${var_file}"
}

function	mkdir_as_postgres()
{
	local	path="${1}"

	[ ! -d "${path}" ] && mkdir -p "${path}"
	chown -R postgres:postgres "${path}"
}

function	postgres_init()
{
	local	nb_line

	mkdir_as_postgres "${PGDATA}"
	mkdir_as_postgres /run/postgresql/
	do_as_postgres "initdb -D ${PGDATA}"
	set_var "listen_addresses" "'*'"
	set_var "logging_collector" "on"
	set_var "log_directory" "'${PGDATA}/log'"
	set_var "log_filename" "'postgresql.log'"
	set_var "log_file_mode" "0666"
	echo -e "host all all 0.0.0.0/0 md5\n$(cat ${PGDATA}/pg_hba.conf)" > "${PGDATA}/pg_hba.conf"
}

function	postgres_db()
{
	do_as_postgres "pg_ctl start -D ${PGDATA}"
	do_sql "CREATE ROLE ${DB_USER} WITH LOGIN ENCRYPTED PASSWORD '${DB_PASS}'"
	do_sql "CREATE DATABASE ${DB_NAME} WITH OWNER ${DB_USER} TEMPLATE template0 ENCODING UTF8 LC_COLLATE 'en_US.UTF-8' LC_CTYPE 'en_US.UTF-8'"
	do_as_postgres "pg_ctl stop -D ${PGDATA}"
}

rm -rf "/run/postgresql"
mkdir_as_postgres "/run/postgresql"

if [ ! -f "${PGDATA}/PG_VERSION" ]; then
	printf "${SERVICE_NAME} \x1b[38:5:160mnot found\x1b[00m, initialize it\n"

	postgres_init
	postgres_db
else
	printf "${SERVICE_NAME} \x1b[38:5:76mfound\x1b[00m, Skiping initialization\n"
fi

mkdir_as_postgres "${PGDATA}/log"

printf "starting ${SERVICE_NAME}\n"

if [ "${#}" == "0" ]; then
	do_as_postgres "postgres -D ${PGDATA}"
else
	exec ${@}
fi

